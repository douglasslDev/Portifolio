{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport Error from \"next/error\";\nimport { getDisplayName } from \"next/dist/next-server/lib/utils\";\nimport { isLocale } from \"../translations/myTypes\";\nimport { LocaleProvider } from \"../context/LocaleContext\";\nexport default (WrappedPage => {\n  const WithLocale = (_ref) => {\n    let {\n      locale\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"locale\"]);\n\n    if (!locale) {\n      return __jsx(Error, {\n        statusCode: 404\n      });\n    }\n\n    return __jsx(LocaleProvider, {\n      lang: locale\n    }, __jsx(WrappedPage, pageProps));\n  };\n\n  WithLocale.getInitialProps = async ctx => {\n    let pageProps = {};\n\n    if (WrappedPage.getInitialProps) {\n      pageProps = await WrappedPage.getInitialProps(ctx);\n    }\n\n    if (typeof ctx.query.lang !== \"string\" || !isLocale(ctx.query.lang)) {\n      return _objectSpread(_objectSpread({}, pageProps), {}, {\n        locale: undefined\n      });\n    }\n\n    return _objectSpread(_objectSpread({}, pageProps), {}, {\n      locale: ctx.query.lang\n    });\n  };\n\n  WithLocale.displayName = `withLang(${getDisplayName(WrappedPage)})`;\n  return WithLocale;\n});","map":null,"metadata":{},"sourceType":"module"}