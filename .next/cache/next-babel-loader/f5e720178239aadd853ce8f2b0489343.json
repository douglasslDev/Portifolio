{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin2\\\\Desktop\\\\portfolio-page\\\\hocs\\\\withLocale.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport Error from \"next/error\";\nimport { getDisplayName } from \"next/dist/next-server/lib/utils\";\nimport { isLocale } from \"../translations/myTypes\";\nimport { LocaleProvider } from \"../context/LocaleContext\";\nexport default (WrappedPage => {\n  const WithLocale = (_ref) => {\n    let {\n      locale\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"locale\"]);\n\n    if (!locale) {\n      return __jsx(Error, {\n        statusCode: 404,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return __jsx(LocaleProvider, {\n      lang: locale,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }\n    }, __jsx(WrappedPage, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  WithLocale.getInitialProps = async ctx => {\n    let pageProps = {};\n\n    if (WrappedPage.getInitialProps) {\n      pageProps = await WrappedPage.getInitialProps(ctx);\n    }\n\n    if (typeof ctx.query.lang !== \"string\" || !isLocale(ctx.query.lang)) {\n      return _objectSpread(_objectSpread({}, pageProps), {}, {\n        locale: undefined\n      });\n    }\n\n    return _objectSpread(_objectSpread({}, pageProps), {}, {\n      locale: ctx.query.lang\n    });\n  };\n\n  WithLocale.displayName = `withLang(${getDisplayName(WrappedPage)})`;\n  return WithLocale;\n});","map":{"version":3,"sources":["C:/Users/admin2/Desktop/portfolio-page/hocs/withLocale.tsx"],"names":["React","Error","getDisplayName","isLocale","LocaleProvider","WrappedPage","WithLocale","locale","pageProps","getInitialProps","ctx","query","lang","undefined","displayName"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAAQC,cAAR,QAA6B,iCAA7B;AAEA,SAAQC,QAAR,QAA+B,yBAA/B;AACA,SAAQC,cAAR,QAA6B,0BAA7B;AAMA,gBAAgBC,WAAD,IAAgC;AAC7C,QAAMC,UAAoC,GAAG,UAA4B;AAAA,QAA3B;AAACC,MAAAA;AAAD,KAA2B;AAAA,QAAfC,SAAe;;AACvE,QAAI,CAACD,MAAL,EAAa;AACX,aAAO,MAAC,KAAD;AAAO,QAAA,UAAU,EAAE,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACD,WACE,MAAC,cAAD;AAAgB,MAAA,IAAI,EAAEA,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,WAAD,eAAiBC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD,GATD;;AAWAF,EAAAA,UAAU,CAACG,eAAX,GAA6B,MAAOC,GAAP,IAAe;AAC1C,QAAIF,SAAS,GAAG,EAAhB;;AACA,QAAIH,WAAW,CAACI,eAAhB,EAAiC;AAC/BD,MAAAA,SAAS,GAAG,MAAMH,WAAW,CAACI,eAAZ,CAA4BC,GAA5B,CAAlB;AACD;;AACD,QAAI,OAAOA,GAAG,CAACC,KAAJ,CAAUC,IAAjB,KAA0B,QAA1B,IAAsC,CAACT,QAAQ,CAACO,GAAG,CAACC,KAAJ,CAAUC,IAAX,CAAnD,EAAqE;AACnE,6CAAWJ,SAAX;AAAsBD,QAAAA,MAAM,EAAEM;AAA9B;AACD;;AACD,2CAAWL,SAAX;AAAsBD,MAAAA,MAAM,EAAEG,GAAG,CAACC,KAAJ,CAAUC;AAAxC;AACD,GATD;;AAWAN,EAAAA,UAAU,CAACQ,WAAX,GAA0B,YAAWZ,cAAc,CAACG,WAAD,CAAc,GAAjE;AAEA,SAAOC,UAAP;AACD,CA1BD","sourcesContent":["import React from \"react\";\r\nimport {NextPage} from \"next\";\r\nimport Error from \"next/error\";\r\nimport {getDisplayName} from \"next/dist/next-server/lib/utils\";\r\n\r\nimport {isLocale, Locale} from \"../translations/myTypes\";\r\nimport {LocaleProvider} from \"../context/LocaleContext\";\r\n\r\ninterface LangProps {\r\n  locale?: Locale;\r\n}\r\n\r\nexport default (WrappedPage: NextPage<any>) => {\r\n  const WithLocale: NextPage<any, LangProps> = ({locale, ...pageProps}) => {\r\n    if (!locale) {\r\n      return <Error statusCode={404} />;\r\n    }\r\n    return (\r\n      <LocaleProvider lang={locale}>\r\n        <WrappedPage {...pageProps} />\r\n      </LocaleProvider>\r\n    );\r\n  };\r\n\r\n  WithLocale.getInitialProps = async (ctx) => {\r\n    let pageProps = {};\r\n    if (WrappedPage.getInitialProps) {\r\n      pageProps = await WrappedPage.getInitialProps(ctx);\r\n    }\r\n    if (typeof ctx.query.lang !== \"string\" || !isLocale(ctx.query.lang)) {\r\n      return {...pageProps, locale: undefined};\r\n    }\r\n    return {...pageProps, locale: ctx.query.lang};\r\n  };\r\n\r\n  WithLocale.displayName = `withLang(${getDisplayName(WrappedPage)})`;\r\n\r\n  return WithLocale;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}