{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin2\\\\Desktop\\\\portfolio-page\\\\context\\\\LocaleContext.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { isLocale } from \"../translations/myTypes\";\nexport const LocaleContext = /*#__PURE__*/React.createContext({\n  locale: \"en\",\n  setLocale: () => null\n});\nexport const LocaleProvider = ({\n  lang,\n  children\n}) => {\n  const [locale, setLocale] = React.useState(lang);\n  const {\n    query\n  } = useRouter();\n  React.useEffect(() => {\n    if (locale !== localStorage.getItem(\"locale\")) {\n      localStorage.setItem(\"locale\", locale);\n    }\n  }, [locale]);\n  React.useEffect(() => {\n    if (typeof query.lang === \"string\" && isLocale(query.lang) && locale !== query.lang) {\n      setLocale(query.lang);\n    }\n  }, [query.lang, locale]);\n  return __jsx(LocaleContext.Provider, {\n    value: {\n      locale,\n      setLocale\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["C:/Users/admin2/Desktop/portfolio-page/context/LocaleContext.tsx"],"names":["React","useRouter","isLocale","LocaleContext","createContext","locale","setLocale","LocaleProvider","lang","children","useState","query","useEffect","localStorage","getItem","setItem"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AACA,SAAgBC,QAAhB,QAA+B,yBAA/B;AAOA,OAAO,MAAMC,aAAa,gBAAGH,KAAK,CAACI,aAAN,CAAkC;AAC7DC,EAAAA,MAAM,EAAE,IADqD;AAE7DC,EAAAA,SAAS,EAAE,MAAM;AAF4C,CAAlC,CAAtB;AAKP,OAAO,MAAMC,cAAwC,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAD,KAAsB;AAC5E,QAAM,CAACJ,MAAD,EAASC,SAAT,IAAsBN,KAAK,CAACU,QAAN,CAAeF,IAAf,CAA5B;AACA,QAAM;AAACG,IAAAA;AAAD,MAAUV,SAAS,EAAzB;AAEAD,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAIP,MAAM,KAAKQ,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf,EAA+C;AAC7CD,MAAAA,YAAY,CAACE,OAAb,CAAqB,QAArB,EAA+BV,MAA/B;AACD;AACF,GAJD,EAIG,CAACA,MAAD,CAJH;AAMAL,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QACE,OAAOD,KAAK,CAACH,IAAb,KAAsB,QAAtB,IACAN,QAAQ,CAACS,KAAK,CAACH,IAAP,CADR,IAEAH,MAAM,KAAKM,KAAK,CAACH,IAHnB,EAIE;AACAF,MAAAA,SAAS,CAACK,KAAK,CAACH,IAAP,CAAT;AACD;AACF,GARD,EAQG,CAACG,KAAK,CAACH,IAAP,EAAaH,MAAb,CARH;AAUA,SACE,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAACA,MAAAA,MAAD;AAASC,MAAAA;AAAT,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,QADH,CADF;AAKD,CAzBM","sourcesContent":["import React from \"react\";\r\nimport {useRouter} from \"next/router\";\r\nimport {Locale, isLocale} from \"../translations/myTypes\";\r\n\r\ninterface ContextProps {\r\n  readonly locale: Locale;\r\n  readonly setLocale: (locale: Locale) => void;\r\n}\r\n\r\nexport const LocaleContext = React.createContext<ContextProps>({\r\n  locale: \"en\",\r\n  setLocale: () => null,\r\n});\r\n\r\nexport const LocaleProvider: React.FC<{lang: Locale}> = ({lang, children}) => {\r\n  const [locale, setLocale] = React.useState(lang);\r\n  const {query} = useRouter();\r\n\r\n  React.useEffect(() => {\r\n    if (locale !== localStorage.getItem(\"locale\")) {\r\n      localStorage.setItem(\"locale\", locale);\r\n    }\r\n  }, [locale]);\r\n\r\n  React.useEffect(() => {\r\n    if (\r\n      typeof query.lang === \"string\" &&\r\n      isLocale(query.lang) &&\r\n      locale !== query.lang\r\n    ) {\r\n      setLocale(query.lang);\r\n    }\r\n  }, [query.lang, locale]);\r\n\r\n  return (\r\n    <LocaleContext.Provider value={{locale, setLocale}}>\r\n      {children}\r\n    </LocaleContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}